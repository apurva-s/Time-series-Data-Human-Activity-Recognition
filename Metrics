{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Metrics","provenance":[{"file_id":"1Ar9ZO31MNkdOty9TrN41CrgFLPEH6mck","timestamp":1618381329127}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"iqT2NZkWDCEe"},"source":["**Import Libraries and Mount Google Drive**\n","\n","The keras and tenserflow libraries were used to create our 1D CNN model.  Sklearn libraries were used to normalize the datasets.  There may be ignorable warnings when importing the libraries."]},{"cell_type":"code","metadata":{"id":"RVqE_ysiJJod","executionInfo":{"status":"ok","timestamp":1619024339598,"user_tz":240,"elapsed":353,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["from collections import Counter\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.model_selection import StratifiedKFold\n","import pandas as pd\n","import numpy as np\n","import scipy.stats as stats\n","\n","import keras\n","from keras.datasets import cifar10\n","from keras.utils import to_categorical\n","from keras.models import Sequential\n","from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Activation, BatchNormalization, Dropout,Conv1D,MaxPooling1D,LSTM,Embedding,GaussianNoise,UpSampling1D\n","\n","from tensorflow.keras import regularizers\n","\n","from keras.optimizers import SGD, Adam, RMSprop\n","import matplotlib.pyplot as plt\n","\n","from sklearn.utils import class_weight\n","import math\n"],"execution_count":31,"outputs":[]},{"cell_type":"code","metadata":{"id":"MkR4qbX9_Sr_","executionInfo":{"status":"ok","timestamp":1619024341044,"user_tz":240,"elapsed":319,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["from google.colab import files"],"execution_count":32,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3msAO8ZatrQQ","executionInfo":{"status":"ok","timestamp":1619024341872,"user_tz":240,"elapsed":369,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"19bbce04-c03b-4842-b9e3-ffc1957ed8f0"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"JTh8kZJ3Fn5g"},"source":["**Function to Plot Graph**"]},{"cell_type":"code","metadata":{"id":"p5yt3hEYDUUI","executionInfo":{"status":"ok","timestamp":1619040545967,"user_tz":240,"elapsed":288,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["# Defining a function for plotting training and validation learning curves\n","def plot_history(history,name):\n","\t  # plot loss\n","    plt.title('Loss')\n","    plt.plot(history.history['loss'], color='blue', label='train')\n","    plt.plot(history.history['val_loss'], color='red', label='test')\n","    plt.ylabel('Loss')\n","    plt.xlabel('Epoch')\n","    plt.legend(['Train', 'Validation'])\n","    plt.show()\n","    \n","    # plot accuracy\n","    plt.title(name + 'Accuracy')\n","    plt.plot(history.history['accuracy'], color='blue', label='train')\n","    plt.plot(history.history['val_accuracy'], color='red', label='test')\n","    plt.ylabel('Accuracy')\n","    plt.xlabel('Epoch')\n","    plt.legend(['Train', 'Validation'])\n","    plt.show()\n","  "],"execution_count":147,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jABJwAkat607"},"source":["**Functions used to format individual rows into seconds of activity**"]},{"cell_type":"markdown","metadata":{"id":"SaKRaAy7FwCu"},"source":["This function is used to split the training data into n_step samples.  There is no overlap between samples."]},{"cell_type":"code","metadata":{"id":"PXXx65sYnLu6","executionInfo":{"status":"ok","timestamp":1619024344569,"user_tz":240,"elapsed":332,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["# split a univariate sequence into samples\n","def split_sequence(xsequence,ysequence,n_steps):\n","\tX, y = list(), list()\n","\ti = 0\n","\twhile i < len(xsequence):\n","\t\t# find the end of this pattern\n","\t\tend_ix = i + n_steps\n","\t\t# check if we are beyond the sequence\n","\t\tif end_ix > len(xsequence)-1:\n","\t\t\tbreak\n","\t\t# gather input and output parts of the pattern\n","\t\tseq_x = xsequence[i:end_ix]\n","\t\tseq_y = np.bincount(ysequence[i:end_ix]).argmax()\n","\t\ti = i+n_steps\n","\t\tX.append(seq_x)\n","\t\ty.append(seq_y)\n","\treturn np.array(X), np.array(y)"],"execution_count":35,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zzpfI03jF5H0"},"source":["This function is used to split the test data into n_step samples.  Again there is no overlap.  Only the X data is returned since this is for a prediction set."]},{"cell_type":"code","metadata":{"id":"I0tDXpVixc3Y","executionInfo":{"status":"ok","timestamp":1619024346470,"user_tz":240,"elapsed":607,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["def split_predictions_sequence(xsequence,n_steps):\n","\tX = list()\n","\ti = 0\n","\twhile i < len(xsequence):\n","\t\t# find the end of this pattern\n","\t\tend_ix = i + n_steps\n","\t\t# check if we are beyond the sequence\n","\t\tif end_ix > len(xsequence)-1:\n","\t\t\tbreak\n","\t\t# gather input and output parts of the pattern\n","\t\tseq_x = xsequence[i:end_ix]\n","\t\ti = i+n_steps\n","\t\tX.append(seq_x)\n","\treturn np.array(X)"],"execution_count":36,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aMQaIggS74AA"},"source":["**Import Data From CSV**\n","\n","Upload the .csv data to your google drive, adjust the file_path variable if needed. The input values are too large and need to be standardized."]},{"cell_type":"code","metadata":{"id":"leWB_vUnLTpy","executionInfo":{"status":"ok","timestamp":1619024485009,"user_tz":240,"elapsed":343,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["file_path = '/content/drive/My Drive/ProjectC2Final/final_without_8.csv' "],"execution_count":38,"outputs":[]},{"cell_type":"code","metadata":{"id":"YIDG9uoMt-Tx","colab":{"base_uri":"https://localhost:8080/","height":406},"executionInfo":{"status":"ok","timestamp":1619024489502,"user_tz":240,"elapsed":3222,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"fdba2f9c-3184-49ca-a04b-ec883a631236"},"source":["input = pd.read_csv(file_path,usecols=[\"xa\",\t\"ya\",\t\"za\",\t\"xg\",\t\"yg\",\t\"zg\",\t\"time\",\t\"subject_name\",\t\"Label\"])\n","input"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>xa</th>\n","      <th>ya</th>\n","      <th>za</th>\n","      <th>xg</th>\n","      <th>yg</th>\n","      <th>zg</th>\n","      <th>time</th>\n","      <th>subject_name</th>\n","      <th>Label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.186920</td>\n","      <td>8.344455</td>\n","      <td>2.908057</td>\n","      <td>0.005771</td>\n","      <td>-0.004480</td>\n","      <td>-0.003345</td>\n","      <td>0.02</td>\n","      <td>subject_001__1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.544637</td>\n","      <td>8.408659</td>\n","      <td>2.890000</td>\n","      <td>0.007967</td>\n","      <td>0.022412</td>\n","      <td>0.001159</td>\n","      <td>0.05</td>\n","      <td>subject_001__1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.849308</td>\n","      <td>8.411614</td>\n","      <td>2.900692</td>\n","      <td>0.027778</td>\n","      <td>-0.010670</td>\n","      <td>-0.014223</td>\n","      <td>0.07</td>\n","      <td>subject_001__1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.509190</td>\n","      <td>8.118649</td>\n","      <td>2.847298</td>\n","      <td>0.021577</td>\n","      <td>-0.045498</td>\n","      <td>-0.021111</td>\n","      <td>0.10</td>\n","      <td>subject_001__1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4.226515</td>\n","      <td>8.273807</td>\n","      <td>2.851742</td>\n","      <td>0.012534</td>\n","      <td>0.000445</td>\n","      <td>-0.016830</td>\n","      <td>0.12</td>\n","      <td>subject_001__1</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1293475</th>\n","      <td>1.266767</td>\n","      <td>8.270302</td>\n","      <td>5.139698</td>\n","      <td>-0.002222</td>\n","      <td>0.005120</td>\n","      <td>-0.000951</td>\n","      <td>985.85</td>\n","      <td>subject_007__4</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1293476</th>\n","      <td>1.150554</td>\n","      <td>8.234723</td>\n","      <td>5.204723</td>\n","      <td>-0.002844</td>\n","      <td>-0.008267</td>\n","      <td>-0.003333</td>\n","      <td>985.87</td>\n","      <td>subject_007__4</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1293477</th>\n","      <td>1.216095</td>\n","      <td>8.261302</td>\n","      <td>5.236952</td>\n","      <td>-0.002018</td>\n","      <td>0.003734</td>\n","      <td>0.001111</td>\n","      <td>985.90</td>\n","      <td>subject_007__4</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1293478</th>\n","      <td>1.314432</td>\n","      <td>8.252274</td>\n","      <td>5.215568</td>\n","      <td>-0.005769</td>\n","      <td>0.007968</td>\n","      <td>-0.000449</td>\n","      <td>985.92</td>\n","      <td>subject_007__4</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1293479</th>\n","      <td>1.293864</td>\n","      <td>8.242272</td>\n","      <td>5.236136</td>\n","      <td>-0.003441</td>\n","      <td>-0.002222</td>\n","      <td>-0.004229</td>\n","      <td>985.95</td>\n","      <td>subject_007__4</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1293480 rows × 9 columns</p>\n","</div>"],"text/plain":["               xa        ya        za  ...    time    subject_name  Label\n","0        4.186920  8.344455  2.908057  ...    0.02  subject_001__1    0.0\n","1        4.544637  8.408659  2.890000  ...    0.05  subject_001__1    0.0\n","2        4.849308  8.411614  2.900692  ...    0.07  subject_001__1    0.0\n","3        4.509190  8.118649  2.847298  ...    0.10  subject_001__1    0.0\n","4        4.226515  8.273807  2.851742  ...    0.12  subject_001__1    0.0\n","...           ...       ...       ...  ...     ...             ...    ...\n","1293475  1.266767  8.270302  5.139698  ...  985.85  subject_007__4    0.0\n","1293476  1.150554  8.234723  5.204723  ...  985.87  subject_007__4    0.0\n","1293477  1.216095  8.261302  5.236952  ...  985.90  subject_007__4    0.0\n","1293478  1.314432  8.252274  5.215568  ...  985.92  subject_007__4    0.0\n","1293479  1.293864  8.242272  5.236136  ...  985.95  subject_007__4    0.0\n","\n","[1293480 rows x 9 columns]"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"markdown","metadata":{"id":"mCeq82h4GCpR"},"source":["Encode output with labels and standardize the X data.  "]},{"cell_type":"code","metadata":{"id":"RZMg5YwCvjFt","colab":{"base_uri":"https://localhost:8080/","height":406},"executionInfo":{"status":"ok","timestamp":1619024492846,"user_tz":240,"elapsed":594,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"2820b51e-fe20-475c-b666-e9c6a2f91565"},"source":["label = LabelEncoder()\n","input['Label']=label.fit_transform(input['Label'])\n","scaler = StandardScaler()\n","newX=input[['xa','ya','za','xg','yg','zg']]\n","Y=input['Label'] \n","newX = scaler.fit_transform(newX)\n","scaled_X = pd.DataFrame(data = newX, columns = ['Ax','Ay','Az','Gx','Gy','Gz'])\n","scaled_X['label'] = Y.values\n","scaled_X"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Ax</th>\n","      <th>Ay</th>\n","      <th>Az</th>\n","      <th>Gx</th>\n","      <th>Gy</th>\n","      <th>Gz</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.626981</td>\n","      <td>0.046021</td>\n","      <td>-0.570783</td>\n","      <td>0.000455</td>\n","      <td>-0.019399</td>\n","      <td>0.091264</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.689881</td>\n","      <td>0.055301</td>\n","      <td>-0.574015</td>\n","      <td>0.001134</td>\n","      <td>-0.002286</td>\n","      <td>0.097143</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.743453</td>\n","      <td>0.055728</td>\n","      <td>-0.572101</td>\n","      <td>0.007248</td>\n","      <td>-0.023338</td>\n","      <td>0.077066</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.683648</td>\n","      <td>0.013381</td>\n","      <td>-0.581657</td>\n","      <td>0.005334</td>\n","      <td>-0.045501</td>\n","      <td>0.068075</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.633943</td>\n","      <td>0.035809</td>\n","      <td>-0.580862</td>\n","      <td>0.002543</td>\n","      <td>-0.016265</td>\n","      <td>0.073663</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1293475</th>\n","      <td>0.113513</td>\n","      <td>0.035302</td>\n","      <td>-0.171389</td>\n","      <td>-0.002012</td>\n","      <td>-0.013290</td>\n","      <td>0.094389</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1293476</th>\n","      <td>0.093079</td>\n","      <td>0.030159</td>\n","      <td>-0.159751</td>\n","      <td>-0.002203</td>\n","      <td>-0.021809</td>\n","      <td>0.091280</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1293477</th>\n","      <td>0.104603</td>\n","      <td>0.034001</td>\n","      <td>-0.153983</td>\n","      <td>-0.001949</td>\n","      <td>-0.014172</td>\n","      <td>0.097081</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1293478</th>\n","      <td>0.121894</td>\n","      <td>0.032696</td>\n","      <td>-0.157810</td>\n","      <td>-0.003106</td>\n","      <td>-0.011478</td>\n","      <td>0.095044</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1293479</th>\n","      <td>0.118278</td>\n","      <td>0.031250</td>\n","      <td>-0.154129</td>\n","      <td>-0.002388</td>\n","      <td>-0.017962</td>\n","      <td>0.090111</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1293480 rows × 7 columns</p>\n","</div>"],"text/plain":["               Ax        Ay        Az        Gx        Gy        Gz  label\n","0        0.626981  0.046021 -0.570783  0.000455 -0.019399  0.091264      0\n","1        0.689881  0.055301 -0.574015  0.001134 -0.002286  0.097143      0\n","2        0.743453  0.055728 -0.572101  0.007248 -0.023338  0.077066      0\n","3        0.683648  0.013381 -0.581657  0.005334 -0.045501  0.068075      0\n","4        0.633943  0.035809 -0.580862  0.002543 -0.016265  0.073663      0\n","...           ...       ...       ...       ...       ...       ...    ...\n","1293475  0.113513  0.035302 -0.171389 -0.002012 -0.013290  0.094389      0\n","1293476  0.093079  0.030159 -0.159751 -0.002203 -0.021809  0.091280      0\n","1293477  0.104603  0.034001 -0.153983 -0.001949 -0.014172  0.097081      0\n","1293478  0.121894  0.032696 -0.157810 -0.003106 -0.011478  0.095044      0\n","1293479  0.118278  0.031250 -0.154129 -0.002388 -0.017962  0.090111      0\n","\n","[1293480 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"markdown","metadata":{"id":"uF9ayGwO8KZe"},"source":["**Sampling Rate**\n","\n","Recording rate is the frequency at which the input was recorded, in this example, it was recorded at 40hz, therefore it is set to 40.  Sample_length is the amount of time you want to count as an activity.  The formula is RecordingRate * *Number of seconds*.  So if you wanted a 2 second sample, it would be set to RecordingRate * 2.  "]},{"cell_type":"code","metadata":{"id":"DV5u4o6LxKK-","executionInfo":{"status":"ok","timestamp":1619024494877,"user_tz":240,"elapsed":238,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["RecordingRate=40\n","Sample_length = RecordingRate\n","n_features = 6"],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"T3SwscoVnlnI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619024496519,"user_tz":240,"elapsed":260,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"dab74cce-cfbf-4379-f267-54647955c10f"},"source":["X = scaled_X[['Ax','Ay','Az','Gx','Gy','Gz']]\n","Y = scaled_X['label']\n","Y.value_counts()"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    967332\n","3    201148\n","2     70356\n","1     54644\n","Name: label, dtype: int64"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"id":"wFZBnjFpxNBq","executionInfo":{"status":"ok","timestamp":1619024497645,"user_tz":240,"elapsed":403,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["Xarray, Yarray=split_sequence(X.to_numpy(),Y.to_numpy(),Sample_length)"],"execution_count":43,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xbW4tBkODGlU"},"source":["**Cross Validation Test (Optional)**\n","\n","Test Cross Validation - Dont run this if not needed"]},{"cell_type":"code","metadata":{"id":"GNP4XlXYDK4V"},"source":["kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=7)\n","cvscores = []"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"O4Mxt3wxDRtE","colab":{"base_uri":"https://localhost:8080/","height":405},"executionInfo":{"status":"error","timestamp":1619050557243,"user_tz":240,"elapsed":2234,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"8c953014-996f-44af-930f-46d4d7bdcd78"},"source":["for train,test in kfold.split(Xarray,Yarray):\n","  # define model\n","  model = Sequential()\n","\n","  model.add(Conv1D(256,3,activation='relu',input_shape=(Sample_length, n_features),padding='same'))\n","  model.add(Dropout(0.5))\n","  model.add(MaxPooling1D(2))\n","\n","  model.add(Conv1D(512,3,activation='relu',padding='same'))\n","  model.add(Dropout(0.5))\n","  model.add(MaxPooling1D(2))\n","\n","  model.add(Conv1D(512,3,activation='relu',padding='same'))\n","  model.add(Dropout(0.5))\n","  model.add(UpSampling1D(2))\n","\n","  model.add(Conv1D(256,3,activation='relu',padding='same'))\n","  model.add(Dropout(0.5))\n","  model.add(UpSampling1D(2))\n","\n","  model.add(Flatten())\n","  model.add(Dense(4,activation='softmax'))\n","  model.compile(optimizer=Adam(learning_rate=0.0001),loss='sparse_categorical_crossentropy',metrics = ['accuracy'])\n","\n","  model.fit(Xarray[train], Yarray[train], epochs=1, batch_size=10, verbose=1)\n","  # evaluate the model\n","  scores = model.evaluate(Xarray[test], Yarray[test], verbose=0)\n","  print(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n","  cvscores.append(scores[1] * 100)\n","print(\"%.2f%% (+/- %.2f%%)\" % (np.mean(cvscores), np.std(cvscores)))\n"],"execution_count":241,"outputs":[{"output_type":"stream","text":["   8/2911 [..............................] - ETA: 3:53 - loss: 1.1801 - accuracy: 0.4899"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-241-c7dfaa2058cd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m   \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moptimizer\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearning_rate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.0001\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'sparse_categorical_crossentropy'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'accuracy'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m   \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXarray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mYarray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     26\u001b[0m   \u001b[0;31m# evaluate the model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m   \u001b[0mscores\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXarray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mYarray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtest\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 _r=1):\n\u001b[1;32m   1099\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1100\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1101\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    853\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 855\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    856\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    857\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"6TLrmp04HBp0"},"source":["print(\"%.2f%% (+/- %.2f%%)\" % (np.mean(cvscores), np.std(cvscores)))\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j04ufCKHDLaa"},"source":["**Normal Validation/Training**"]},{"cell_type":"markdown","metadata":{"id":"Eg0Mz9WrGU2l"},"source":["Reshape the X and Y Data"]},{"cell_type":"code","metadata":{"id":"KvUZQNZ1oEcW","executionInfo":{"status":"ok","timestamp":1619024501494,"user_tz":240,"elapsed":261,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["Xarray = Xarray.reshape((Xarray.shape[0]),Xarray.shape[1],n_features)"],"execution_count":44,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SwONN15Noj6v","executionInfo":{"status":"ok","timestamp":1619024502117,"user_tz":240,"elapsed":170,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"cd3f3812-7175-4a28-b0cf-1a5050290981"},"source":["Xarray.shape,Yarray.shape"],"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((32336, 40, 6), (32336,))"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q9Zy6NGL4Tgt","executionInfo":{"status":"ok","timestamp":1619024502834,"user_tz":240,"elapsed":223,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"19a220c3-5e11-4128-fc8f-ade35a9cf9d9"},"source":["Counter(Yarray)"],"execution_count":46,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Counter({0: 24199, 1: 1365, 2: 1745, 3: 5027})"]},"metadata":{"tags":[]},"execution_count":46}]},{"cell_type":"markdown","metadata":{"id":"T7aCtPRJ8j5y"},"source":["**Test and Train Data Split**"]},{"cell_type":"markdown","metadata":{"id":"XC6bGzkJ8nqb"},"source":["Right now the data is split 20% (test_size) variable."]},{"cell_type":"code","metadata":{"id":"MA0HYGfh0qoy","executionInfo":{"status":"ok","timestamp":1619024503983,"user_tz":240,"elapsed":270,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["X_train, X_test,Y_Train,Y_Test = train_test_split(Xarray,Yarray, test_size = 0.2)"],"execution_count":47,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IucoxSsj4WB3","executionInfo":{"status":"ok","timestamp":1619024504743,"user_tz":240,"elapsed":220,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"4a65aa46-2d0a-4949-da3c-d1362b09b0d3"},"source":["Counter(Y_Train),Counter(Y_Test)"],"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(Counter({0: 19346, 1: 1098, 2: 1392, 3: 4032}),\n"," Counter({0: 4853, 1: 267, 2: 353, 3: 995}))"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"markdown","metadata":{"id":"SSqC5l7s858N"},"source":["**1D CNN Model**\n","\n","We tested 2 different 1D CNNs.  The multi-layered CNN performed the best, but took significantly longer to run.\n","\n","This is the basic 1D CNN, it achieves a 0.62 F1 score with around 20 epochs"]},{"cell_type":"code","metadata":{"id":"_eedWGfdoKnX","executionInfo":{"status":"ok","timestamp":1619024506108,"user_tz":240,"elapsed":281,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["# define model\n","model = Sequential()\n","model.add(Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(Sample_length, n_features),padding='same'))\n","model.add(Dropout(0.5))\n","model.add(MaxPooling1D(pool_size=2))\n","model.add(Flatten())\n","model.add(Dense(4,activation='softmax'))\n","model.compile(optimizer=Adam(learning_rate=0.00001),loss='sparse_categorical_crossentropy',metrics = ['accuracy'])"],"execution_count":49,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TFFtCJKnHKMI"},"source":["This is a multi layered 1D CNN, it achieves around a 0.77 F1 score with around 40 epochs."]},{"cell_type":"code","metadata":{"id":"Z0zgWh48JeLg","executionInfo":{"status":"ok","timestamp":1619050561037,"user_tz":240,"elapsed":483,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["model = Sequential()\n","\n","model.add(Conv1D(256,3,activation='relu',input_shape=(Sample_length, n_features),padding='same'))\n","model.add(Dropout(0.5))\n","model.add(MaxPooling1D(2))\n","\n","model.add(Conv1D(512,3,activation='relu',padding='same'))\n","model.add(Dropout(0.5))\n","model.add(MaxPooling1D(2))\n","\n","model.add(Conv1D(512,3,activation='relu',padding='same'))\n","model.add(Dropout(0.5))\n","model.add(UpSampling1D(2))\n","\n","model.add(Conv1D(256,3,activation='relu',padding='same'))\n","model.add(Dropout(0.5))\n","model.add(UpSampling1D(2))\n","\n","model.add(Flatten())\n","model.add(Dense(4,activation='softmax'))\n","model.compile(optimizer=Adam(learning_rate=0.00001),loss='sparse_categorical_crossentropy',metrics = ['accuracy'])"],"execution_count":242,"outputs":[]},{"cell_type":"code","metadata":{"id":"jXAPig0o3xqY","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619050562169,"user_tz":240,"elapsed":283,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"35bdd4f4-ce66-470d-b15e-d3dae1d32961"},"source":["model.summary()"],"execution_count":243,"outputs":[{"output_type":"stream","text":["Model: \"sequential_28\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv1d_109 (Conv1D)          (None, 40, 256)           4864      \n","_________________________________________________________________\n","dropout_109 (Dropout)        (None, 40, 256)           0         \n","_________________________________________________________________\n","max_pooling1d_55 (MaxPooling (None, 20, 256)           0         \n","_________________________________________________________________\n","conv1d_110 (Conv1D)          (None, 20, 512)           393728    \n","_________________________________________________________________\n","dropout_110 (Dropout)        (None, 20, 512)           0         \n","_________________________________________________________________\n","max_pooling1d_56 (MaxPooling (None, 10, 512)           0         \n","_________________________________________________________________\n","conv1d_111 (Conv1D)          (None, 10, 512)           786944    \n","_________________________________________________________________\n","dropout_111 (Dropout)        (None, 10, 512)           0         \n","_________________________________________________________________\n","up_sampling1d_54 (UpSampling (None, 20, 512)           0         \n","_________________________________________________________________\n","conv1d_112 (Conv1D)          (None, 20, 256)           393472    \n","_________________________________________________________________\n","dropout_112 (Dropout)        (None, 20, 256)           0         \n","_________________________________________________________________\n","up_sampling1d_55 (UpSampling (None, 40, 256)           0         \n","_________________________________________________________________\n","flatten_28 (Flatten)         (None, 10240)             0         \n","_________________________________________________________________\n","dense_28 (Dense)             (None, 4)                 40964     \n","=================================================================\n","Total params: 1,619,972\n","Trainable params: 1,619,972\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pUfZ2Vnm_ZIV"},"source":["**Automatic Weights**"]},{"cell_type":"markdown","metadata":{"id":"aTQBGRKxHcHW"},"source":["This is used to help with the data imbalance.  Use this to automatically calculate what weights to use.  Either use automatic or manual weights, do not use both)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lG6ssx3LyfJ_","executionInfo":{"status":"ok","timestamp":1619050563720,"user_tz":240,"elapsed":262,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"3ef212d5-6c46-47f7-e6e6-45cff036200b"},"source":["weights = dict(enumerate(class_weight.compute_class_weight('balanced',np.unique(Y_Train),Y_Train).flatten(),0))\n","weights"],"execution_count":244,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 0.3342809883179986,\n"," 1: 5.889799635701275,\n"," 2: 4.645833333333333,\n"," 3: 1.6039186507936507}"]},"metadata":{"tags":[]},"execution_count":244}]},{"cell_type":"markdown","metadata":{"id":"3dIwJi0eHZCR"},"source":["**Train the Model**"]},{"cell_type":"code","metadata":{"id":"CKQ1MsV2oOOw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619057195041,"user_tz":240,"elapsed":948275,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"4815c2e3-60c4-4697-d992-cdcbbd8909ea"},"source":["history = model.fit(X_train,Y_Train,epochs=5,validation_data=(X_test,Y_Test),verbose=1,shuffle=True,class_weight=weights)"],"execution_count":257,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","809/809 [==============================] - 183s 226ms/step - loss: 0.3328 - accuracy: 0.8004 - val_loss: 0.4514 - val_accuracy: 0.8695\n","Epoch 2/5\n","809/809 [==============================] - 186s 229ms/step - loss: 0.3255 - accuracy: 0.8031 - val_loss: 0.4609 - val_accuracy: 0.8678\n","Epoch 3/5\n","809/809 [==============================] - 192s 238ms/step - loss: 0.3235 - accuracy: 0.8057 - val_loss: 0.4470 - val_accuracy: 0.8715\n","Epoch 4/5\n","809/809 [==============================] - 189s 233ms/step - loss: 0.3202 - accuracy: 0.8048 - val_loss: 0.4562 - val_accuracy: 0.8632\n","Epoch 5/5\n","809/809 [==============================] - 199s 246ms/step - loss: 0.3134 - accuracy: 0.8111 - val_loss: 0.4706 - val_accuracy: 0.8559\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Xo1X6vaf1Ho6"},"source":["plot_history(history,\"Dropout Rate = 0.5 \")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MlxuRjLAH3ko"},"source":["**Run the predictions for subjects 9 to 12**\n","\n","Before running the prediction create the samples and standardize the data. Specify the path to the directory containing the prediction datasets.  You do not have to specify each individual csv, only the directory."]},{"cell_type":"code","metadata":{"id":"74XDPhvtxXgQ"},"source":["# User must specify this directory\n","PredictionDirectory = '/content/drive/My Drive/ProjectC2Final/TestData/'\n","ypredictions = []\n","for i in range(9,13):\n","  if i == 9:\n","    PredictionCSV = PredictionDirectory + '/subject_009_01__x.csv'\n","    test_input = pd.read_csv(PredictionCSV,names=[\"Ax\",\"Ay\",\"Az\",\"Gx\",\"Gy\",\"Gz\"])\n","  else:\n","    PredictionCSV = PredictionDirectory + 'subject_0{0}_01__x.csv'.format(i)\n","    test_input = pd.read_csv(PredictionCSV,names=[\"Ax\",\"Ay\",\"Az\",\"Gx\",\"Gy\",\"Gz\"])\n","  newX=test_input[['Ax','Ay','Az','Gx','Gy','Gz']]\n","  newX = scaler.transform(newX)\n","  scaled_X = pd.DataFrame(data = newX, columns = ['Ax','Ay','Az','Gx','Gy','Gz'])\n","  X = scaled_X[['Ax','Ay','Az','Gx','Gy','Gz']]\n","  X_data = split_predictions_sequence(X.to_numpy(),Sample_length)\n","  X_data = X_data.reshape((X_data.shape[0]),X_data.shape[1],n_features)\n","  \n","  ypredictions.append(model.predict(X_data))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vDSq740IIKwL"},"source":["**Transform Y Data**\n","\n","The Y data is not in the correct form, instead of having 1 output, there are 4 outputs which represent the probability of what class the output represents.  For example Y[0] might look like [0.1,0.2,0.6,0.1].  The third index has the highest probability so the output is set to whatever that index represents."]},{"cell_type":"code","metadata":{"id":"peu3rbPSyVtZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618970942131,"user_tz":240,"elapsed":4800,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"2b5635c8-ee74-4852-c770-25a1ed5e2b7b"},"source":["class_names = ['0','1','2','3']\n","argmax_predictions=[]\n","for j in range (0,4):\n","  print(\"Subject {} Predictions Complete\".format(j+9))\n","  #print(\"---------------------------------------------------\")\n","  argmax_df = pd.DataFrame({'label':[]})\n","  for i in range (0,len(ypredictions[j])):\n","    #print(class_names[np.argmax(ypredictions[j][i])])\n","    add_df = pd.DataFrame({'label':[np.argmax(ypredictions[j][i])]})\n","    argmax_df = argmax_df.append(add_df)\n","  argmax_df['label'] = argmax_df['label'].astype('int')\n","  argmax_predictions.append(argmax_df)\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Subject 9 Predictions Complete\n","Subject 10 Predictions Complete\n","Subject 11 Predictions Complete\n","Subject 12 Predictions Complete\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"3tlZhOrgItFU"},"source":["**Count the number of outputs for each classification in the prediction set**\n","\n","This can give you a general idea of whether or not your model is biasing one or two classes"]},{"cell_type":"code","metadata":{"id":"gfxMtnFlx97m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618971032368,"user_tz":240,"elapsed":212,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"060d50ce-1204-4edf-dfea-518bd60321dd"},"source":["for j in range(0,4):\n","  print(\"Subject {} Labels\".format(j+9))\n","  print(argmax_predictions[j].value_counts())\n","  print(\"\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Subject 9 Labels\n","label\n","0        530\n","3        351\n","1         48\n","2         20\n","dtype: int64\n","\n","Subject 10 Labels\n","label\n","3        611\n","0        472\n","1         79\n","2         65\n","dtype: int64\n","\n","Subject 11 Labels\n","label\n","0        800\n","3        318\n","2        104\n","1         72\n","dtype: int64\n","\n","Subject 12 Labels\n","label\n","0        899\n","2        120\n","1         73\n","3         40\n","dtype: int64\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iM8fjUuSIzy6"},"source":["**Create the Prediction CSVs**\n","\n","Because we divide the inputs into 1 second samples (composed of 40 rows of inputs), there will be less outputs than expected.  The predictions that are created are interpolated to match the expected number of outputs.  This is done by dividing the number of expected outputs by the number of predictions.  For example, if our model produces 100 predictions, but we need to compare those to 1000 outputs, the 100 predicitons would be duplicated by multiples of 10 (1000/100) in a for loop."]},{"cell_type":"code","metadata":{"id":"0FUwIpIOMbU3"},"source":["PredictionCSV = pd.read_csv(PredictionDirectory + '/subject_009_01__y_time.csv',names=[\"label\"])\n","output_length = len(PredictionCSV)\n","loop_length = math.floor(output_length/len(ypredictions[0]))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"36zOUQoW1cvD","colab":{"base_uri":"https://localhost:8080/","height":353},"executionInfo":{"status":"ok","timestamp":1618971498654,"user_tz":240,"elapsed":27835,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"8bc80e4c-5b22-4893-c8cb-b98556f69112"},"source":["class_names = ['0','1','2','3']\n","\n","for i in range(9,13):\n","  print(i)\n","  if i == 9:\n","    test_input = pd.read_csv(PredictionDirectory + '/subject_009_01__y_time.csv',names=[\"label\"])\n","  else:\n","    test_input = pd.read_csv(PredictionDirectory + '/subject_0{}_01__y_time.csv'.format(i),names=[\"label\"])\n","\n","  output_length = len(test_input)\n","  print(\"Expected Length : \",output_length)\n","  print(\"Prediction Length : \",len(ypredictions[i-9]))\n","\n","  predictions_csv = pd.DataFrame({'Class':[]})\n","  for x in range(0,len(ypredictions[i-9])):\n","    new_df = pd.DataFrame({'Class':[class_names[np.argmax(ypredictions[i-9][x])]]})\n","    for j in range(0,loop_length):\n","      predictions_csv = predictions_csv.append(new_df)\n","  print(len(predictions_csv))\n","\n","  while len(predictions_csv) != output_length:\n","    new_df = predictions_csv.tail(1)\n","    predictions_csv = predictions_csv.append(new_df)\n","  print(len(predictions_csv))\n","  predictions_csv.to_csv('subject_0{0}_01__y_prediction.csv'.format(i),header=False,index=False)\n","  files.download('subject_0{0}_01__y_prediction.csv'.format(i))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["9\n","Expected Length :  9498\n","Prediction Length :  949\n","9490\n","9498\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_5571fadf-e5f7-4287-918e-4467890f3052\", \"subject_09_01__y_prediction.csv\", 18996)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["10\n","Expected Length :  12270\n","Prediction Length :  1227\n","12270\n","12270\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_bac422cf-ea3e-4e34-94c8-59d2fa09c276\", \"subject_010_01__y_prediction.csv\", 24540)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["11\n","Expected Length :  12940\n","Prediction Length :  1294\n","12940\n","12940\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_7e29cd91-a2f7-4d54-8793-aeb1023abb5f\", \"subject_011_01__y_prediction.csv\", 25880)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["12\n","Expected Length :  11330\n","Prediction Length :  1132\n","11320\n","11330\n"],"name":"stdout"},{"output_type":"display_data","data":{"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"application/javascript":["download(\"download_2be12382-b4ac-4fb4-b20a-07db3ae8ad40\", \"subject_012_01__y_prediction.csv\", 22660)"],"text/plain":["<IPython.core.display.Javascript object>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"dNWvZOf4Poca"},"source":["**Calculate F1, Recall, Precision**"]},{"cell_type":"code","metadata":{"id":"aFz7ypTHPn_J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619057215508,"user_tz":240,"elapsed":11154,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"c0ab7485-cc0d-456d-a322-79a384a7051d"},"source":["# User must specify this directory\n","PredictionDirectory = '/content/drive/My Drive/ProjectC2Final/TrainingData/'\n","ypredictions = []\n","test_input = pd.read_csv('/content/drive/My Drive/ProjectC2Final/TrainingData/subject_008_01__x.csv',names=[\"Ax\",\"Ay\",\"Az\",\"Gx\",\"Gy\",\"Gz\"])\n","newX=test_input[['Ax','Ay','Az','Gx','Gy','Gz']]\n","newX = scaler.transform(newX)\n","scaled_X = pd.DataFrame(data = newX, columns = ['Ax','Ay','Az','Gx','Gy','Gz'])\n","X = scaled_X[['Ax','Ay','Az','Gx','Gy','Gz']]\n","X_data = split_predictions_sequence(X.to_numpy(),Sample_length)\n","X_data = X_data.reshape((X_data.shape[0]),X_data.shape[1],n_features)\n","  \n","ypredictions.append(model.predict(X_data))\n","\n","class_names = ['0','1','2','3']\n","argmax_predictions=[]\n","for j in range (0,1):\n","  print(\"Subject {} Predictions Complete\".format(j+9))\n","  #print(\"---------------------------------------------------\")\n","  argmax_df = pd.DataFrame({'label':[]})\n","  for i in range (0,len(ypredictions[j])):\n","    #print(class_names[np.argmax(ypredictions[j][i])])\n","    add_df = pd.DataFrame({'label':[np.argmax(ypredictions[j][i])]})\n","    argmax_df = argmax_df.append(add_df)\n","  argmax_df['label'] = argmax_df['label'].astype('int')\n","  argmax_predictions.append(argmax_df)\n","\n","for j in range(0,1):\n","  print(\"Subject {} Labels\".format(j+9))\n","  print(argmax_predictions[j].value_counts())\n","  print(\"\")\n","\n","PredictionCSV = pd.read_csv('/content/drive/My Drive/ProjectC2Final/TrainingData/subject_008_01__y.csv',names=[\"label\"])\n","output_length = len(PredictionCSV)\n","loop_length = math.floor(output_length/len(ypredictions[0]))\n","\n","class_names = ['0','1','2','3']\n","\n","for i in range(0,1):\n","  print(i)\n","  test_input = pd.read_csv('/content/drive/My Drive/ProjectC2Final/TrainingData/subject_008_01__y.csv',names=[\"label\"])\n","\n","  output_length = len(test_input)\n","  print(\"Expected Length : \",output_length)\n","  print(\"Prediction Length : \",len(ypredictions[i]))\n","\n","  predictions_csv = pd.DataFrame({'label':[]})\n","  for x in range(0,len(ypredictions[i])):\n","    new_df = pd.DataFrame({'label':[class_names[np.argmax(ypredictions[i][x])]]})\n","    for j in range(0,loop_length):\n","      predictions_csv = predictions_csv.append(new_df)\n","  print(len(predictions_csv))\n","\n","  while len(predictions_csv) != output_length:\n","    new_df = predictions_csv.tail(1)\n","    predictions_csv = predictions_csv.append(new_df)\n","  print(len(predictions_csv))\n","  predictions_csv.to_csv('subject_0{0}_01__y_prediction.csv'.format(i),header=False,index=False)\n","  #files.download('subject_0{0}_01__y_prediction.csv'.format(i))"],"execution_count":258,"outputs":[{"output_type":"stream","text":["Subject 9 Predictions Complete\n","Subject 9 Labels\n","label\n","3        629\n","0        469\n","2        101\n","1          4\n","dtype: int64\n","\n","0\n","Expected Length :  12035\n","Prediction Length :  1203\n","12030\n","12035\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GPf9qZwxvBt4","executionInfo":{"status":"ok","timestamp":1619057215777,"user_tz":240,"elapsed":264,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"3eb3a56a-0b5c-4828-96f4-fa35dd2b7ba0"},"source":["test_input.value_counts()"],"execution_count":259,"outputs":[{"output_type":"execute_result","data":{"text/plain":["label\n","0        9892\n","3        1322\n","2         678\n","1         143\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":259}]},{"cell_type":"code","metadata":{"id":"cCRBV0YIxVjG"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"sQWwaEtK1OXM","executionInfo":{"status":"ok","timestamp":1619057215777,"user_tz":240,"elapsed":259,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["from sklearn.metrics import f1_score,precision_score,recall_score"],"execution_count":260,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xWF2-DUw1nuI","executionInfo":{"status":"ok","timestamp":1619056116322,"user_tz":240,"elapsed":246,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"8b7ed349-baad-4279-ffc4-04d0405d1cf9"},"source":["test_input.to_numpy().astype(int)"],"execution_count":250,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0],\n","       [0],\n","       [0],\n","       ...,\n","       [0],\n","       [0],\n","       [0]])"]},"metadata":{"tags":[]},"execution_count":250}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uExjXj051T_C","executionInfo":{"status":"ok","timestamp":1619056117637,"user_tz":240,"elapsed":256,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"a3ce28ea-9924-4103-c8d1-2762c5b7cda2"},"source":["f1_score(test_input.to_numpy().astype(int),predictions_csv.to_numpy().astype(int),average='weighted')"],"execution_count":251,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6208450548706627"]},"metadata":{"tags":[]},"execution_count":251}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hoIs5BHU2G2b","executionInfo":{"status":"ok","timestamp":1619056118688,"user_tz":240,"elapsed":251,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"aaf76871-4928-430c-c42d-ada07e5c973f"},"source":["recall_score(test_input.to_numpy().astype(int),predictions_csv.to_numpy().astype(int),average='weighted')"],"execution_count":252,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.56235978396344"]},"metadata":{"tags":[]},"execution_count":252}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hHD2SpAq2iDT","executionInfo":{"status":"ok","timestamp":1619056119856,"user_tz":240,"elapsed":272,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"a2a2dc48-415b-42d8-a432-4b664d84e94d"},"source":["precision_score(test_input.to_numpy().astype(int),predictions_csv.to_numpy().astype(int),average='weighted')"],"execution_count":253,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8492052037461266"]},"metadata":{"tags":[]},"execution_count":253}]},{"cell_type":"code","metadata":{"id":"yGuxk2MRQ_tm","executionInfo":{"status":"ok","timestamp":1619056146673,"user_tz":240,"elapsed":242,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}}},"source":["from sklearn.metrics import classification_report"],"execution_count":254,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yn9n-ceURD18","executionInfo":{"status":"ok","timestamp":1619057218343,"user_tz":240,"elapsed":241,"user":{"displayName":"Nicholas Viado","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gizan_QTqFniePdy4b4HFoWjl6kdnbONLAAnM5x=s64","userId":"17804541991072215371"}},"outputId":"24813fae-8c21-4bb8-d171-f4409ddb8d50"},"source":["print(classification_report(predictions_csv.to_numpy().astype(int),test_input.to_numpy().astype(int)))"],"execution_count":261,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.46      0.97      0.63      4695\n","           1       0.01      0.05      0.02        40\n","           2       0.91      0.61      0.73      1010\n","           3       0.94      0.20      0.33      6290\n","\n","    accuracy                           0.53     12035\n","   macro avg       0.58      0.46      0.43     12035\n","weighted avg       0.75      0.53      0.48     12035\n","\n"],"name":"stdout"}]}]}